plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l')
xlim = c(min(pred), max(pred))
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
xlim = c(min(pred), max(pred))
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l')
xlim = c(min(pred), max(pred))
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l')
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'red', lty = 2)
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l'xlim = c(min(pred), max(pred)))
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',xlim = c(min(pred), max(pred)))
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'red', lty = 2)
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',xlim = c(min(pred), max(pred)))
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'red', lty = 2)
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',xlim = c(min(pred), max(pred)))
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)))
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'red', lty = 2)
tmp_male=data.frame(clo=NA,tOut=seq(min(df2$tOut),max(df2$tOut),0.1),tInOp=mean(df2$tInOp),sex="male")
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), xlab = 'clo')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), ylab = 'clo')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), ylab = 'clo', xlab = 'tOut')
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'red', lty = 2)
legend()
lines(tmp_male$tOut,pred[,3], col = 'green', lty = 2)
conf = predict(fit2,tmp_male,interval = 'confidence')
pred = predict(fit2, tmp_male,interval = 'prediction')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), ylab = 'clo', xlab = 'tOut')
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'green', lty = 2)
lines(tmp_male$tOut,pred[,3], col = 'green', lty = 2)
pred = predict(fit2, tmp_female,interval = 'prediction')
conf = predict(fit2,tmp_female,interval = 'confidence')
pred = predict(fit2, tmp_female,interval = 'prediction')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), ylab = 'clo', xlab = 'tOut')
lines(tmp_male$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_male$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_male$tOut,pred[,2], col = 'green', lty = 2)
conf = predict(fit2,tmp_female,interval = 'confidence')
pred = predict(fit2, tmp_female,interval = 'prediction')
plot(tmp_male$tOut, conf[,1], col = 'blue', type = 'l',ylim = c(min(pred), max(pred)), ylab = 'clo', xlab = 'tOut')
lines(tmp_female$tOut,conf[,2], col = 'red', lty = 2)
lines(tmp_female$tOut,conf[,3], col = 'red', lty = 2)
lines(tmp_female$tOut,pred[,2], col = 'green', lty = 2)
lines(tmp_female$tOut,pred[,3], col = 'green', lty = 2)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma = sd(x)
sigma
#a) sketch whole data:
dnorm(x)
#a) sketch whole data:
dnorm(x, mean = mean(x), sigma)
#a) sketch whole data:
plot(dnorm(x, mean = mean(x), sigma))
#a) sketch whole data:
plot(dnorm(x, mean = mean(x), sigma))
#a) sketch whole data:
plot(x,dnorm(x, mean = mean(x), sigma))
mu = mean(x)
sigma = sd(x)
mu = mean(x)
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma), type )
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma, type = 'l' )
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma, type = 'l' )
sigma = sd(x)
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma, type = 'l' ))
sigma = sd(x)
mu = mean(x)
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma, type = 'l' ))
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma) type = 'l' )
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma), type = 'l' )
#a) sketch whole data:
plot(x,dnorm(x, mean = mu, sigma))
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, 100)
L  = sapply(theta, L.complete)
L.complete <- function(theta,y){
prod(dnorm(y,mean=theta[1],sd=sqrt(sigma2)))
}
L  = sapply(theta, L.complete)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, 100)
L  = sapply(theta, L.complete)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, 100)
L.complete <- function(theta,y){
prod(dnorm(y,mean=theta[1],sd=sqrt(sigma2)))
}
L  = sapply(theta, L.complete)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =100)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
plot(theta,L/max(L), type = 'l')
plot(theta,L/max(L))
L.avg = sapply(theta, L.avg)
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
lines(theta, L.avg)
plot(theta,L/max(L))
lines(theta, L.avg)
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =100)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg)
lines(theta, L.avg/max(L.avg))
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =100)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg/max(L.avg))
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =100)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg/max(L.avg), col = 'red')
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =1000)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg/max(L.avg), col = 'red')
fit <- optim(c(1),fn = L.complete, hessian = T)
fit
fit <- optim(c(0.1),fn = L.complete, hessian = T)
L.complete <- function(theta){
-sum(dnorm(x,mean=theta[1],sd=sqrt(sigma2), log = T))
}
nll <- function(theta){
-sum(dnorm(x,mean=theta[1],sd=sqrt(sigma2), log = T))
}
fit <- optim(c(0.1),fn = nll, hessian = T, control = )
fit <- optim(c(1),fn = nll, hessian = T)
fit <- optim(c(0.1),fn = nll, hessian = T)
fit
fit$par
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =1000)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg/max(L.avg), col = 'red')
nll <- function(theta){
-sum(dnorm(x,mean=theta[1],sd=sqrt(sigma2), log = T))
}
fit <- optim(c(0.1),fn = nll, hessian = T)
fit$par
fit <- optim(c(0.1),fn = nll, hessian = T, method  = 'Brent')
x = c(71, 74, 82, 76, 91, 82, 82, 75, 79, 82, 72, 90)
sigma2 = var(x)
mu = mean(x)
n = length(x)
#a) sketch whole data:
theta = seq(mu-3*sigma2, mu+3*sigma2, length =1000)
L.complete <- function(theta){
prod(dnorm(x,mean=theta[1],sd=sqrt(sigma2)))
}
L.avg <- function(theta){
(dnorm(mu,mean=theta[1],sd=sqrt(sigma2/n)))
}
L.avg = sapply(theta, L.avg)
L  = sapply(theta, L.complete)
plot(theta,L/max(L))
lines(theta, L.avg/max(L.avg), col = 'red')
nll <- function(theta){
-sum(dnorm(x,mean=theta[1],sd=sqrt(sigma2), log = T))
}
suppressWarnings(
fit <- optim(c(0.1),fn = nll, hessian = T))
fit$par
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
x = c(4, 6, 3, 7, 2, 4)
x = c(4, 6, 3, 7, 2, 4)
theta = seq(mean(x)-3*sd(x), mean(x)+3*sd(x), length= 200)
L.complete <- function(theta){
-sum(dpois(x, lambda = theta, log = T))
}
L = sapply(theta, L.complete)
plot(theta, L/max(L))
L
x = c(4, 6, 3, 7, 2, 4)
theta = seq(0, mean(x)+3*sd(x), length= 200)
L.complete <- function(theta){
-sum(dpois(x, lambda = theta, log = T))
}
L = sapply(theta, L.complete)
plot(theta, L/max(L))
lambda = seq(0, 10, by = 1)
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 10, by = 1)
L.complete <- function(lambda){
-sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L/max(L))
lambda = seq(0, 100, by = 1)
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 100, by = 1)
L.complete <- function(lambda){
-sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L/max(L))
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 100, by = 1)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L/max(L))
lambda = seq(0, 10, by = 1)
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 10, by = 1)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L/max(L))
plot(lambda, L)
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 10, by = 1)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L)
x = c(4, 6, 3, 7, 2, 4)
lambda = seq(0, 10, by = 1)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
L = sapply(lambda, L.complete)
plot(lambda, L)
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
L = sapply(lam, L.complete)
plot(lam, L)
plot(lam, L-max(L))
plot(lam, L-max(L), xlab = expression(lambda))
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
L.q <- function(lambda){
l(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, L-max(L), xlab = expression(lambda))
lines(lam, Lq-max(Lq))
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
L.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, L-max(L), xlab = expression(lambda))
lines(lam, Lq-max(Lq), col = 'red')
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
l.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
l.q <- function(lambda){
l.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
l = sapply(lam, l.complete)
lq = sapply(lam, l.q)
plot(lam, l-max(l), xlab = expression(lambda))
lines(lam, lq-max(lq), col = 'red')
##Not on log-scale:
L.complete <- function(lambda){
prod(dpois(x, lambda ))
}
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, exp(L-max(L)), xlab = expression(lambda))
lines(lam, exp(Lq-max(Lq)), col = 'red')
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
l.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
l.q <- function(lambda){
l.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
l = sapply(lam, l.complete)
lq = sapply(lam, l.q)
plot(lam, l-max(l), xlab = expression(lambda))
lines(lam, lq-max(lq), col = 'red')
##Not on log-scale:
L.complete <- function(lambda){
prod(dpois(x, lambda ))
}
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, exp(L-max(L)), xlab = expression(lambda))
lines(lam, q-max(Lq), col = 'red')
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
l.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
l.q <- function(lambda){
l.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
l = sapply(lam, l.complete)
lq = sapply(lam, l.q)
plot(lam, l-max(l), xlab = expression(lambda))
lines(lam, lq-max(lq), col = 'red')
##Not on log-scale:
L.complete <- function(lambda){
prod(dpois(x, lambda ))
}
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, exp(L-max(L)), xlab = expression(lambda))
lines(lam, Lq-max(Lq), col = 'red')
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
l.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
l.q <- function(lambda){
l.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
l = sapply(lam, l.complete)
lq = sapply(lam, l.q)
plot(lam, l-max(l), xlab = expression(lambda))
lines(lam, lq-max(lq), col = 'red')
##Not on log-scale:
L.complete <- function(lambda){
prod(dpois(x, lambda ))
}
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, L.complete)
Lq = sapply(lam, L.q)
plot(lam, exp(L-max(L)), xlab = expression(lambda))
lines(lam, exp(Lq-max(Lq)), col = 'red')
x = c(4, 6, 3, 7, 2, 4)
lam = seq(2.3, 7.2, length = 100)
lam.hat = mean(x)
l.complete <- function(lambda){
sum(dpois(x, lambda , log = T))
}
#l'(lambda) = 0 da MLE! Derfor kun første og andet led af taylor expansion
l.q <- function(lambda){
l.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
l = sapply(lam, l.complete)
lq = sapply(lam, l.q)
plot(lam, l-max(l), xlab = expression(lambda))
lines(lam, lq-max(lq), col = 'red')
##Not on log-scale:
L.complete <- function(lambda){
prod(dpois(x, lambda ))
}
L.q <- function(lambda){
L.complete(lam.hat) - 0.5 * length(x)/lam.hat * (lambda - lam.hat)^2
}
L = sapply(lam, l.complete)
Lq = sapply(lam, l.q)
plot(lam, exp(L-max(L)), xlab = expression(lambda))
lines(lam, exp(Lq-max(Lq)), col = 'red')
